return {
  "nvim-lualine/lualine.nvim",
  dependencies = { "nvim-tree/nvim-web-devicons" },
  config = function()
    require("lualine").setup()
    --
    --
    -- -- Color table for highlights
    -- -- stylua: ignore
    --
    -- local conditions = {
    --   buffer_not_empty = function()
    --     return vim.fn.empty(vim.fn.expand("%:t")) ~= 1
    --   end,
    --   hide_in_width = function()
    --     return vim.fn.winwidth(0) > 80
    --   end,
    --   check_git_workspace = function()
    --     local filepath = vim.fn.expand("%:p:h")
    --     local gitdir = vim.fn.finddir(".git", filepath .. ";")
    --     return gitdir and #gitdir > 0 and #gitdir < #filepath
    --   end,
    -- }
    --
    -- -- Config
    -- local config = {
    --   options = {
    --     -- Disable sections and component separators
    --     component_separators = "",
    --     section_separators = "",
    --     theme = {
    --       -- We are going to use lualine_c an lualine_x as left and
    --       -- right section. Both are highlighted by c theme .  So we
    --       -- are just setting default looks o statusline
    --     },
    --   },
    --   sections = {
    --     -- these are to remove the defaults
    --     lualine_a = { "mode" },
    --     lualine_b = {},
    --     lualine_y = {},
    --     lualine_z = {},
    --     -- These will be filled later
    --     lualine_c = {},
    --     lualine_x = {},
    --   },
    --   inactive_sections = {
    --     -- these are to remove the defaults
    --     lualine_a = {},
    --     lualine_b = {},
    --     lualine_y = {},
    --     lualine_z = {},
    --     lualine_c = {},
    --     lualine_x = {},
    --   },
    -- }
    --
    -- -- Inserts a component in lualine_c at left section
    -- local function ins_left(component)
    --   table.insert(config.sections.lualine_c, component)
    -- end
    --
    -- -- Inserts a component in lualine_x at right section
    -- local function ins_right(component)
    --   table.insert(config.sections.lualine_x, component)
    -- end
    --
    -- -- ins_left({
    -- --   function()
    -- --     return "▊"
    -- --   end,
    -- --   color = { fg = colors.blue }, -- Sets highlighting of component
    -- --   padding = { left = 0, right = 1 }, -- We don't need space before this
    -- -- })
    --
    -- -- ins_left({
    -- --   -- mode component
    -- --   function()
    -- --     return ""
    -- --   end,
    -- --   color = function()
    -- --     -- auto change color according to neovims mode
    -- --     local mode_color = {
    -- --       n = colors.red,
    -- --       i = colors.green,
    -- --       v = colors.blue,
    -- --       [""] = colors.blue,
    -- --       V = colors.blue,
    -- --       c = colors.magenta,
    -- --       no = colors.red,
    -- --       s = colors.orange,
    -- --       S = colors.orange,
    -- --       [""] = colors.orange,
    -- --       ic = colors.yellow,
    -- --       R = colors.violet,
    -- --       Rv = colors.violet,
    -- --       cv = colors.red,
    -- --       ce = colors.red,
    -- --       r = colors.cyan,
    -- --       rm = colors.cyan,
    -- --       ["r?"] = colors.cyan,
    -- --       ["!"] = colors.red,
    -- --       t = colors.red,
    -- --     }
    -- --     return { fg = mode_color[vim.fn.mode()] }
    -- --   end,
    -- --   padding = { left = 1, right = 1 },
    -- -- })
    --
    -- ins_left({
    --   "filename",
    --   cond = conditions.buffer_not_empty,
    -- })
    --
    -- ins_left({ "location" })
    --
    -- ins_left({ "progress" })
    --
    -- ins_left({
    --   "diagnostics",
    --   sources = { "nvim_diagnostic" },
    --   symbols = { error = " ", warn = " ", info = " " },
    -- })
    --
    -- ins_right({
    --   function()
    --     if TSC_ERRORS_COUNT == 0 or TSC_ERRORS_COUNT == nil then
    --       return ""
    --     end
    --
    --     return "Project errors: " .. tostring(TSC_ERRORS_COUNT)
    --   end,
    -- })
    --
    -- ins_right({
    --   -- Lsp server name .
    --   function()
    --     local msg = "No Active Lsp"
    --     local buf_ft = vim.api.nvim_buf_get_option(0, "filetype")
    --     local clients = vim.lsp.get_clients()
    --     if next(clients) == nil then
    --       return msg
    --     end
    --     for _, client in ipairs(clients) do
    --       local filetypes = client.config.filetypes
    --       if filetypes and vim.fn.index(filetypes, buf_ft) ~= -1 then
    --         return client.name
    --       end
    --     end
    --     return msg
    --   end,
    --   color = { fg = "#ffffff", gui = "bold" },
    -- })
    --
    -- -- -- Add components to right sections
    -- -- ins_right({
    -- --   "o:encoding", -- option component same as &encoding in viml
    -- --   fmt = string.upper, -- I'm not sure why it's upper case either ;)
    -- --   cond = conditions.hide_in_width,
    -- --   color = { fg = colors.green, gui = "bold" },
    -- -- })
    -- --
    -- -- ins_right({
    -- --   "fileformat",
    -- --   fmt = string.upper,
    -- --   icons_enabled = false, -- I think icons are cool but Eviline doesn't have them. sigh
    -- --   color = { fg = colors.green, gui = "bold" },
    -- -- })
    --
    -- ins_right({
    --   "branch",
    --   icon = "",
    -- })
    --
    -- ins_right({
    --   "diff",
    --   -- Is it me or the symbol for modified us really weird
    --   symbols = { added = " ", modified = "󰝤 ", removed = " " },
    --   cond = conditions.hide_in_width,
    -- })
    --
    -- lualine.setup(config)
  end,
}
