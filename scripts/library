#!/bin/bash

# Define colors
GREEN="\033[0;32m"
BLUE="\033[0;34m"
RED="\033[0;31m"
NC="\033[0m" # No Color

function print_success() {
  echo -e "${GREEN}$1${NC}"
}

function print_failure() {
  echo -e "${RED}$1${NC}"
}

function print_info() {
  echo -e "${BLUE}$1${NC}"
}

function is_package_installed() {
  package="$1"
  check="$(paru -Qs --color always "${package}" | grep "local" | grep "${package} ")"
  if [ -n "${check}" ]; then
    echo 0
    return
  fi
  echo 1
  return
}

function install_packages() {
  toInstall=()

  for pkg; do
    if [[ $(is_package_installed "${pkg}") == 0 ]]; then
      print_success "${pkg} is already installed."
      continue
    fi

    toInstall+=("${pkg}")
  done

  if [[ "${toInstall[@]}" == "" ]]; then
    return
  fi

  printf "Packages to install:\n%s\n" "${toInstall[@]}"
  paru --noconfirm -S "${toInstall[@]}"
}

function create_symlink() {
  local target=$1
  local link_name=$2

  # Check if the target exists
  if [[ ! -e $target ]]; then
    print_failure "Error: Target '$target' does not exist."
    return 1
  fi

  # Check if the link name already exists
  if [[ -e $link_name || -L $link_name ]]; then
    if [[ -L $link_name ]]; then
      # It's a symlink, check if it points to the same target
      existing_target=$(readlink "$link_name")
      if [[ $existing_target == $target ]]; then
        print_success "Symlink '$link_name' already exists and points to '$target'."
        return 0
      else
        print_failure "Warning: Symlink '$link_name' points to a different target '$existing_target'."
        read -p "Do you want to replace it? (y/n) " choice
        if [[ $choice != "y" ]]; then
          echo -e "${NC}Skipping '$link_name'."
          return 1
        fi
        # Remove the old symlink
        rm -f "$link_name"
      fi
    else
      # It's not a symlink, back it up or remove it
      print_failure "Warning: '$link_name' already exists and is not a symlink."
      read -p "Do you want to back it up and replace it? (y/n) " choice
      if [[ $choice != "y" ]]; then
        echo "Skipping '$link_name'."
        return 1
      fi
      mv "$link_name" "${link_name}.bak"
      echo "Backed up '$link_name' to '${link_name}.bak'."
    fi
  fi

  # Create the symlink
  ln -s "$target" "$link_name"

  # Check if the symlink creation was successful
  if [[ $? -eq 0 ]]; then
    print_success "Created symlink: '$link_name' -> '$target'."
  else
    # If failed, check if the link is in a privileged directory
    if [[ $link_name == /usr/* ]]; then
      print_failure "Failed to create symlink: '$link_name' -> '$target'. You might need to run this command with sudo."
    else
      print_failure "Failed to create symlink: '$link_name' -> '$target'."
    fi
  fi
}

function cpu_is_intel() {
  local vendor
  vendor=$(grep -m 1 'vendor_id' /proc/cpuinfo)
  [[ $vendor == *"GenuineIntel"* ]]
}

function gpu_has_amd() {
  lspci | grep -i 'vga' | grep -qi 'amd'
}

function gpu_has_intel() {
  lspci | grep -i 'vga\|3d\|display' | grep -qi 'intel'
}
